# tmux settings

run-shell "/home/gb/bin/log .tmux.conf starts"
# {{{ Plugins
# these haven't been working for months and I haven't noticed
# maybe I don't need them?
set -g @emulate-scroll-for-no-mouse-alternate-buffer on
set -g @scroll-speed-num-lines-per-scroll 1
set -g @scroll-in-moused-over-pane on

set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'tmux-plugins/tmux-open'

run '~/.tmux/plugins/tpm/tpm'
# }}}
# {{{ Basic settings
set -g prefix C-a
unbind C-b
bind C-a send-prefix

set -g base-index 1

set-option -g set-titles on

set -g default-terminal tmux-256color
set -g status-keys vi
set -g history-limit 10000

set -g status off # remove the status line

setw -g mode-keys vi

# interacts badly with focus events and vim by ringing the bell
setw -g monitor-activity off

set-option -g renumber-windows on

# No delay for escape key press
set -sg escape-time 0

set -g set-clipboard on

# focus
set -g focus-events on
# }}}
# {{{ Copy and Paste
set -g mouse on
unbind -T copy-mode-vi MouseDragEnd1Pane

# copy & paste between tmux and x clipboard
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send-keys -X rectangle-toggle
bind Escape copy-mode # prefix + Escape starts copy mode.
bind p paste-buffer # prefix + p pastes the latest buffer
# transfer copied text to attached terminal with yank:
bind -T copy-mode-vi y send -X copy-selection-and-cancel

# }}}
# {{{ Key maps
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# open new panes on remote host
bind S run '/home/gb/bin/tmux-ssh split-window -v'
bind V run '/home/gb/bin/tmux-ssh split-window -h'

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-l run-shell "/home/gb/bin/log c-l"
# bind -n C-h run-shell "/home/gb/bin/log c-h"

# resize panes
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# Vim style pane selection
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# switch windows
bind -n M-Right next-window
bind -n M-Left previous-window
bind -r Tab last-window
# bind -n C-@ last-window  # bound to Ctrl-` in my terminal
bind -n M-1 select-window -t :=1
bind -n M-2 select-window -t :=2
bind -n M-3 select-window -t :=3
bind -n M-4 select-window -t :=4
bind -n M-5 select-window -t :=5
bind -n M-6 select-window -t :=6
bind -n M-7 select-window -t :=7
bind -n M-8 select-window -t :=8

# switch panes
bind -n C-Right select-pane -R
bind -n C-Left select-pane -L
bind -n C-Up select-pane -U
bind -n C-Down select-pane -D

# common split
bind 3 source-file ~/lib/split3.tmux

# restore clear screen
# bind C-l send-keys C-l

# toggle keybindings for nested tmux
# F12 switches off local key bindings so keys pass to a nested tmux
bind -T root F12  {
  set prefix None
  set key-table off
#  set status-style "fg=#888888,bg=#444444"
#  set window-status-current-style "fg=#444444,bg=#888888"
  if -F '#{pane_in_mode}' 'send-keys -X cancel'
  refresh-client -S
}

bind -T off F12 {
  set -u prefix
  set -u key-table
#  set -u status-style
#  set -u window-status-current-style
  refresh-client -S
}

# create a nested tmux session running on a remote host
# the -I provides a default value
# the session name on the remote machine is same as the machine name
bind N command-prompt -I gbhome "new-window -n nested ssh -t %1 /usr/bin/tmux -2 new-session -A -s %1"

# send keys to the nested session
# I'm requiring the command to be ssh and the window name to be nested
set-hook -g pane-focus-in {
  if "[ #{pane_current_command} = 'ssh' -a #{window_name} = 'nested' ]" {
    set prefix None
    set key-table off
    if -F '#{pane_in_mode}' 'send-keys -X cancel'
  } {
    set -u prefix
    set -u key-table
  } 
}

# allow switching away from a nested window
bind -T off M-Right next-window
bind -T off M-Left previous-window
bind -T off M-1 select-window -t :=1
bind -T off M-2 select-window -t :=2
bind -T off M-3 select-window -t :=3
bind -T off M-4 select-window -t :=4
bind -T off M-5 select-window -t :=5
bind -T off M-6 select-window -t :=6
bind -T off M-7 select-window -t :=7
bind -T off M-8 select-window -t :=8
bind -T off MouseDown1Status select-window -t =
  
# Reload tmux config
bind r source-file ~/.tmux.conf

# cheatsheet
bind ` run "/home/gb/bin/cheatsheet ~/lib/tmux.cheat"

# }}}
# {{{ Theme
# %if "#{==:#{host},penguin}"
# run-shell "echo #{SSH_CONNECTION} a #{==:#{host},penguin} b #{||:#{==:#{host},gb},#{SSH_CONNECTION}} > /tmp/tmux.out"
# if at work use dark otherwise light
# %if "#{||:#{==:#{host},penguin},#{SSH_CONNECTION}}"
# set-environment -g light 1
# %else
# set-environment -g light 0
# %endif
# source "~/.tmux-theme.conf"
# Tweaks
# }}}
# {{{ Terminal tweaks
# enable true color 
%if "#{==:#{host},penguin}"
set-option -sa terminal-overrides ',xterm-kitty:RGB,clipboard'
set-option -ga terminal-overrides ',xterm-256color:Tc'
%else
set-option -sa terminal-features ',xterm-kitty:RGB,clipboard'
set-option -sa terminal-features ",xterm-256color:RGB,ccolour"
%endif


run-shell "/home/gb/bin/log .tmux.conf ends"
